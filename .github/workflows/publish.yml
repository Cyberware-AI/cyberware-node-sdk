name: Build and Publish

on:
  push:
    branches: [main]

concurrency:
  group: publish-main
  cancel-in-progress: false

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
          scope: '@cyberwareai'
          always-auth: true

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies (bun)
        run: bun install --frozen-lockfile || bun install

      - name: Display version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Publishing version: $CURRENT_VERSION"

      - name: Build package
        run: bun run build || npm run build

      - name: Configure npm auth
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          echo "@cyberwareai:registry=https://registry.npmjs.org" >> ~/.npmrc

      - name: npm diagnostics
        run: |
          echo "whoami: $(npm whoami 2>/dev/null || echo '<not authed>')"
          echo "list org packages (may be empty on first publish):"
          npm access list packages @cyberwareai || true
          PKG_NAME=$(node -p "require('./package.json').name")
          PKG_VERSION=$(node -p "require('./package.json').version")
          echo "Publishing: $PKG_NAME@$PKG_VERSION"

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm publish --access public --ignore-scripts
