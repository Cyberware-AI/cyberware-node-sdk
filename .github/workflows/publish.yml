name: Build and Publish (main)

on:
  push:
    branches: [ main ]

concurrency:
  group: publish-main
  cancel-in-progress: false

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
          scope: '@cyberwareai'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies (bun)
        run: bun install --frozen-lockfile || bun install

      - name: Build package
        run: bun run build || npm run build

      - name: npm diagnostics
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "whoami: $(npm whoami 2>/dev/null || echo '<not authed>')"
          echo "ls org packages (may be empty if first publish):"
          npm access ls-packages @cyberwareai || true
          npm config set always-auth true

      - name: Determine publish necessity
        id: should_publish
        shell: bash
        run: |
          PKG_NAME=$(node -p "require('./package.json').name")
          PKG_VERSION=$(node -p "require('./package.json').version")
          echo "Package: $PKG_NAME@$PKG_VERSION"
          PUBLISHED_VERSION=$(npm view "$PKG_NAME" version || true)
          echo "Published: ${PUBLISHED_VERSION:-<none>}"
          if [ "$PKG_VERSION" = "$PUBLISHED_VERSION" ]; then
            echo "Version already published. Skipping."
            echo "publish=false" >> $GITHUB_OUTPUT
          else
            echo "publish=true" >> $GITHUB_OUTPUT
          fi

      - name: Publish to npm
        if: steps.should_publish.outputs.publish == 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm publish --access public --ignore-scripts


